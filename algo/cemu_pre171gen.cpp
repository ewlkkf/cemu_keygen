#include <windows.h>
#include <time.h>  
#include <sys/types.h>  
#include <sys/stat.h>  
#include <stdio.h>  
#include <errno.h>  
extern "C"
{
	DWORD keygen_code_171();
	DWORD keygen_code_pre171();
}



BYTE settings_bin[0xD3] = {
0x1A ,0x7B ,0xE2 ,0x56 ,0x86 ,0x9B ,0xD5 ,0x96 ,0xE8 ,0x02 ,0x6C ,0x7A ,0x0F ,0x00 ,0x00 ,0x00, 
0x01 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0xE8,
0x02 ,0x6C ,0x7A ,0x23 ,0x00 ,0x00 ,0x00 ,0x10 ,0x1E ,0x00 ,0x00 ,0x01 ,0x00 ,0x01 ,0x00 ,0x01, 
0x00 ,0x01 ,0x01 ,0x00 ,0x00 ,0x00,
//Offset 0x36 is the start of the registration block
//we need the registration words
//need to investigate 0x38-39
//0x3A has the registration dword
//0x3E has the timestamp of the serial
//0x42 has the registration HWID
0xFF ,0x01 ,0x00 ,0x00 ,0xC6 ,0x9B ,0x43 ,0x59 ,0x00 ,0x00, 0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00, 
0xE8 ,0x02 ,0x6C ,0x7A ,0x81 ,0x00, 
0x00 ,0x00 ,0x04 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00, 
0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00, 
0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00,
0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00,
0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00, 
0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00, 
0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00, 
0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00, 
0x00 ,0x00 ,0x00
};

int file_exist (char *filename)
{
	struct stat   buffer;   
	return (stat (filename, &buffer) == 0);
}
char filepath_[255];

#define ROL(x, n) (((x) << (n)) | ((x) >> (32-(n))))

int process_serial(char *serial)
{
	//get harddrive serial
	DWORD disk_serial;
	GetVolumeInformationA("C:\\", NULL, NULL, &disk_serial, NULL, NULL, NULL, NULL);
	DWORD code = keygen_code_pre171();
	//DWORD code = keygen_code_171();
	//code =  ROL(disk_serial,1) ^ code;
	code = disk_serial ^ code;
	time_t current_time; 
	time(&current_time); 
	//Gen serial if doesn't exist.
	if(!file_exist("serial.bin"))
	{
		FILE *fp_serial = fopen("serial.bin","wb");
		if (!fp_serial) return 0;
		for(int i = 0; i < 30; i++) {
			int num = rand()%0xFF;
			fprintf(fp_serial,"%02x",num);
		}
		fclose(fp_serial);
	}
	
	//do real work
	FILE* fp_settings = NULL;
	BOOL fp_setexists = file_exist("settings.bin");
	int ret;
	if(!fp_setexists)
	{
		fp_settings =fopen("settings.bin","wb");
		if (!fp_settings) return 0;
		int err =fwrite(settings_bin,sizeof(settings_bin),1,fp_settings);
		if (!err) return 0;
		ret = 1;
	}
	else
	{
		fp_settings =fopen("settings.bin","rb+");
		if (!fp_settings) return 0;
		ret = 2;
	}
	//timestamp; 
	fseek( fp_settings,0x3E, SEEK_SET );
	int err=fwrite((DWORD*)&current_time,sizeof(DWORD),1,fp_settings);
	if (!err) return 0;
	//registration data
	fseek( fp_settings,0x3A, SEEK_SET );
	err=fwrite(&settings_bin[0x3A],sizeof(DWORD),1,fp_settings);
	if (!err) return 0;
	//HWID
	fseek( fp_settings, 0x42, SEEK_SET );
	err=fwrite((DWORD*)&code,sizeof(DWORD),1,fp_settings);
	if(!err)return 0;
	fclose(fp_settings);
	fp_settings = NULL;
	return ret;
}
